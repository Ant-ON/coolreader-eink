/***************************************************************************
 *   CoolReader engine                                                     *
 *   Copyright (C) 2011 Vadim Lopatin <coolreader.org@gmail.com>           *
 *   Copyright (C) 2018 poire-z <poire-z@users.noreply.github.com>         *
 *   Copyright (C) 2022 Aleksey Chernov <valexlin@gmail.com>               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or         *
 *   modify it under the terms of the GNU General Public License           *
 *   as published by the Free Software Foundation; either version 2        *
 *   of the License, or (at your option) any later version.                *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the Free Software           *
 *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,            *
 *   MA 02110-1301, USA.                                                   *
 ***************************************************************************/

/**
 * Generator for glyph gamma correction tables
 */

#include <stdio.h>
#include <math.h>

#define GAMMA_LEVELS 42
#define GAMMA_NORMAL 15

static const double gamma_levels[] = {
//     0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15
    0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 0.98, 1.00,
//    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31
    1.02, 1.05, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.50, 1.60, 1.70, 1.80, 1.90, 2.00,
//    32    33    34    35    36    37    38    39    40    41
    2.10, 2.20, 2.30, 2.40, 2.50, 2.60, 2.70, 2.80, 2.90, 3.00
};

void genTable( FILE * out, double gamma, int index ) {
    fprintf(out, "static const unsigned char gamma_table_%d[256] = { // gamma=%f\n    ", index, gamma);
    for ( int i=0; i<=255; i++ ) {
        double v = (255-i) / 255.0;
        v = pow(v, gamma);
        int n = (int)round(v * 255);
        n = 255 - n;
	fprintf(out, "%3d, ", n);
	if ( i%22==21 )
	    fprintf(out, "\n    ");
    }
    fprintf(out, "};\n");
}

/// generation of 
int main(int argc, const char ** argv)
{
    if ( argc<2 ) {
	printf("USAGE: gammagen <filename>\n");
	return -1;
    }
    const char * filename = argv[1];
    FILE * out = fopen(filename, "wt");
    if ( !out ) {
	printf("Cannot create file %s\n", filename);
	return -1;
    }
    fprintf(out, "// Gamma tables for using with freetype\n");
    fprintf(out, "// don't edit: this file is generated by crengine/Tools/GammaGen/gammagen.cpp\n");
    fprintf(out, "// to rebuild, run crengine/Tools/GammaGen/gen.sh\n");
    fprintf(out, "// \n");
    fprintf(out, "#define GAMMA_LEVELS %d\n", GAMMA_LEVELS);
    fprintf(out, "#define GAMMA_NO_CORRECTION_INDEX %d\n", GAMMA_NORMAL);
    fprintf(out, "\n\n");
    
    fprintf(out, "// gamma correction tables, 0..%d\n", GAMMA_LEVELS-1);
    fprintf(out, "extern const unsigned char * cr_gamma_tables[GAMMA_LEVELS];\n");
    fprintf(out, "// gamma correction levels table 0..%d\n", GAMMA_LEVELS-1);
    fprintf(out, "extern const double cr_gamma_levels[GAMMA_LEVELS];\n");
    fprintf(out, "// corrects gamma for value 0..255, gamma_index must be 0..%d (%d means no correction)\n", GAMMA_LEVELS-1, GAMMA_NORMAL);
    fprintf(out, "inline unsigned char cr_correct_gamma( unsigned char value, int gamma_index ) { return cr_gamma_tables[gamma_index][value]; } \n");
    fprintf(out, "// corrects gamma for byte buffer; gamma_index must be 0..%d (%d means no correction)\n", GAMMA_LEVELS-1, GAMMA_NORMAL);
    fprintf(out, "void cr_correct_gamma_buf( unsigned char * buf, int size, int gamma_index );\n");
    fprintf(out, "\n\n");
         
    fprintf(out, "#ifdef GAMMA_TABLES_IMPL\n");
    
    int i;
    for ( i=0; i<GAMMA_LEVELS; i++ ) {
	genTable(out, gamma_levels[i], i);
    }
    fprintf(out, "\n");
    fprintf(out, "const unsigned char * cr_gamma_tables[GAMMA_LEVELS] = {\n");
    for ( i=0; i<GAMMA_LEVELS; i++ ) {
        fprintf(out, "    gamma_table_%d, // %f \n", i, gamma_levels[i]);
    }
    fprintf(out, "};\n\n");
    fprintf(out, "\n");
    fprintf(out, "const double cr_gamma_levels[GAMMA_LEVELS] = {\n");
    for ( i=0; i<GAMMA_LEVELS; i++ ) {
        fprintf(out, "    %f,\n", gamma_levels[i]);
    }
    fprintf(out, "};\n\n");

    fprintf(out, "// corrects gamma for byte buffer; gamma_index must be 0..%d (%d means no correction)\n", GAMMA_LEVELS-1, GAMMA_NORMAL);
    fprintf(out, "void cr_correct_gamma_buf( unsigned char * buf, int size, int gamma_index ) {\n"
                 "    const unsigned char * table = cr_gamma_tables[gamma_index];\n"
                 "    for ( int i=0; i<size; i++ )\n"
                 "        buf[i] = table[buf[i]];\n"
                 "}\n");
 
    fprintf(out, "\n#endif\n");
    

    fclose(out);
    return 0;
}
